name: CI/CD Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # ここをv3に変更

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Dockerイメージをビルド
      - name: Build Docker image
        run: |
          docker-compose build

      # Dockerイメージをアップロードする場合（DockerHubなど）
      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag app ${{ secrets.DOCKER_USERNAME }}/app
          docker push ${{ secrets.DOCKER_USERNAME }}/app

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # ここをv3に変更
      
      # Dockerイメージを使用してESLintを実行
      - name: Run ESLint
        run: |
          docker-compose run --rm app npx eslint -c eslint.config.mjs .

  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # ここをv3に変更

      # Dockerイメージを使用してE2Eテストを実行
      - name: Run E2E tests
        run: |
          docker run --rm -e REACT_APP_API_URL=http://app:3000 \
            -e REACT_APP_TEST_EMAIL=${{ secrets.REACT_APP_TEST_EMAIL }} \
            -e REACT_APP_TEST_PASSWORD=${{ secrets.REACT_APP_TEST_PASSWORD }} \
            app npm run test:e2e
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - lint  # Lintが成功した場合のみ実行
      - e2e   # E2Eテストが成功した場合のみ実行
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # ここをv3に変更

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Functions to Firebase
        run: |
          echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci --token "${{ secrets.FIREBASE_TOKEN }}"
          firebase deploy --only functions --project "${{ secrets.FIREBASE_PROJECT_ID }}" --token "${{ secrets.FIREBASE_TOKEN }}"
        
      - name: Deploy Hosting to Firebase
        run: |
          firebase deploy --only hosting --project "${{ secrets.FIREBASE_PROJECT_ID }}" --token "${{ secrets.FIREBASE_TOKEN }}"
